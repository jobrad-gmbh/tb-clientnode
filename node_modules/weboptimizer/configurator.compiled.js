#!/usr/bin/env node


// -*- coding: utf-8 -*-
'use strict';
/* !
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons naming
    3.0 unported license. see http://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/
// region imports

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _clientnode = require('clientnode');

var _clientnode2 = _interopRequireDefault(_clientnode);

var _fs = require('fs');

var fileSystem = _interopRequireWildcard(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _helper = require('./helper.compiled');

var _helper2 = _interopRequireDefault(_helper);

var _package = require('./package');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// NOTE: Only needed for debugging this file.
try {
    require('source-map-support/register');
} catch (error) {}
// NOTE: "{configuration as metaConfiguration}" would result in a read only
// variable named "metaConfiguration".

/* eslint-enable no-unused-vars */

/* eslint-disable no-unused-vars */
let metaConfiguration = _package.configuration;
/*
    To assume to go two folder up from this file until there is no
    "node_modules" parent folder is usually resilient again dealing with
    projects where current working directory isn't the projects directory and
    this library is located as a nested dependency.
*/
metaConfiguration.default.path.context = __dirname;
metaConfiguration.default.contextType = 'main';
while (true) {
    metaConfiguration.default.path.context = _path2.default.resolve(metaConfiguration.default.path.context, '../../');
    if (_path2.default.basename(_path2.default.dirname(metaConfiguration.default.path.context)) !== 'node_modules') break;
}
if (_path2.default.basename(_path2.default.dirname(process.cwd())) === 'node_modules' || _path2.default.basename(_path2.default.dirname(process.cwd())) === '.staging' && _path2.default.basename(_path2.default.dirname(_path2.default.dirname(process.cwd()))) === 'node_modules') {
    /*
        NOTE: If we are dealing was a dependency project use current directory
        as context.
    */
    metaConfiguration.default.path.context = process.cwd();
    metaConfiguration.default.contextType = 'dependency';
} else
    /*
        NOTE: If the current working directory references this file via a
        linked "node_modules" folder using current working directory as context
        is a better assumption than two folders up the hierarchy.
    */
    try {
        if (fileSystem.lstatSync(_path2.default.join(process.cwd(), 'node_modules')).isSymbolicLink()) metaConfiguration.default.path.context = process.cwd();
    } catch (error) {}
let specificConfiguration;
try {
    /* eslint-disable no-eval */
    specificConfiguration = eval('require')(_path2.default.join(metaConfiguration.default.path.context, 'package'));
    /* eslint-enable no-eval */
} catch (error) {
    specificConfiguration = { name: 'mockup' };
    metaConfiguration.default.path.context = process.cwd();
}
const name = specificConfiguration.name;
specificConfiguration = specificConfiguration.webOptimizer || {};
specificConfiguration.name = name;
// endregion
// region loading default configuration
// NOTE: Given node command line arguments results in "npm_config_*"
// environment variables.
let debug = metaConfiguration.default.debug;
if (specificConfiguration.debug !== undefined) debug = specificConfiguration.debug;else if (process.env.npm_config_dev === 'true') debug = true;
metaConfiguration.default.path.context += '/';
// Merges final default configuration object depending on given target
// environment.
const libraryConfiguration = metaConfiguration.library;
let configuration;
if (debug) configuration = _clientnode2.default.extendObject(true, _clientnode2.default.modifyObject(metaConfiguration.default, metaConfiguration.debug), metaConfiguration.debug);else configuration = metaConfiguration.default;
configuration.debug = debug;
if (typeof configuration.library === 'object') _clientnode2.default.extendObject(true, _clientnode2.default.modifyObject(libraryConfiguration, configuration.library), configuration.library);
if ('library' in specificConfiguration && specificConfiguration.library === true || ('library' in specificConfiguration && specificConfiguration.library === undefined || !('library' in specificConfiguration)) && configuration.library) configuration = _clientnode2.default.extendObject(true, _clientnode2.default.modifyObject(configuration, libraryConfiguration), libraryConfiguration);
// endregion
/*
    region merging and evaluating default, test, document, specific and dynamic
    settings
*/
// / region load additional dynamically given configuration
let count = 0;
let filePath = null;
while (true) {
    const newFilePath = configuration.path.context + `.dynamicConfiguration-${count}.json`;
    if (!_clientnode2.default.isFileSync(newFilePath)) break;
    filePath = newFilePath;
    count += 1;
}
let runtimeInformation = {
    givenCommandLineArguments: process.argv
};
if (filePath) {
    runtimeInformation = JSON.parse(fileSystem.readFileSync(filePath, {
        encoding: configuration.encoding }));
    fileSystem.unlink(filePath, error => {
        if (error) throw error;
    });
}
// // region apply use case specific configuration
if (runtimeInformation.givenCommandLineArguments.length > 2) for (const type of ['document', 'test', 'test:browser']) if (runtimeInformation.givenCommandLineArguments[2] === type) _clientnode2.default.extendObject(true, _clientnode2.default.modifyObject(configuration, configuration[type]), configuration[type]);
// // endregion
for (const type of ['document', 'test', 'test:Browser']) delete configuration[type];
// / endregion
_clientnode2.default.extendObject(true, _clientnode2.default.modifyObject(_clientnode2.default.modifyObject(configuration, specificConfiguration), runtimeInformation), specificConfiguration, runtimeInformation);
let result = null;
if (runtimeInformation.givenCommandLineArguments.length > 3) result = _clientnode2.default.stringParseEncodedObject(runtimeInformation.givenCommandLineArguments[runtimeInformation.givenCommandLineArguments.length - 1], configuration, 'configuration');
if (_clientnode2.default.isPlainObject(result)) _clientnode2.default.extendObject(true, _clientnode2.default.modifyObject(configuration, result), result);
// / region determine existing pre compiled dll manifests file paths
configuration.dllManifestFilePaths = [];
if (_clientnode2.default.isDirectorySync(configuration.path.target.base)) for (const fileName of fileSystem.readdirSync(configuration.path.target.base)) if (fileName.match(/^.*\.dll-manifest\.json$/)) configuration.dllManifestFilePaths.push(_path2.default.resolve(configuration.path.target.base, fileName));
// / endregion
// / region define dynamic resolve parameter
const parameterDescription = ['currentPath', 'fileSystem', 'Helper', 'path', 'require', 'Tools', 'webOptimizerPath', 'now', 'nowUTCTimestamp'];
const now = new Date();
const nowUTCTimestamp = Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds(), now.getUTCMilliseconds());
/* eslint-disable no-eval */
const parameter = [process.cwd(), fileSystem, _helper2.default, _path2.default, eval('require'), _clientnode2.default, __dirname, now, nowUTCTimestamp];
/* eslint-enable no-eval */
// / endregion
// / region build absolute paths
configuration.path.base = _path2.default.resolve(configuration.path.context, configuration.path.base);
for (const key in configuration.path) if (configuration.path.hasOwnProperty(key) && key !== 'base' && typeof configuration.path[key] === 'string') configuration.path[key] = _path2.default.resolve(configuration.path.base, configuration.path[key]) + '/';else if (_clientnode2.default.isPlainObject(configuration.path[key])) {
    configuration.path[key].base = _path2.default.resolve(configuration.path.base, configuration.path[key].base);
    for (const subKey in configuration.path[key]) if (configuration.path[key].hasOwnProperty(subKey) && !['base', 'public'].includes(subKey) && typeof configuration.path[key][subKey] === 'string') configuration.path[key][subKey] = _path2.default.resolve(configuration.path[key].base, configuration.path[key][subKey]) + '/';else if (_clientnode2.default.isPlainObject(configuration.path[key][subKey])) {
        configuration.path[key][subKey].base = _path2.default.resolve(configuration.path[key].base, configuration.path[key][subKey].base);
        for (const subSubKey in configuration.path[key][subKey]) if (configuration.path[key][subKey].hasOwnProperty(subSubKey) && subSubKey !== 'base' && typeof configuration.path[key][subKey][subSubKey] === 'string') configuration.path[key][subKey][subSubKey] = _path2.default.resolve(configuration.path[key][subKey].base, configuration.path[key][subKey][subSubKey]) + '/';
    }
}
// / endregion
const resolvedConfiguration = _clientnode2.default.resolveDynamicDataStructure(configuration, parameterDescription, parameter);
// endregion
// region consolidate file specific build configuration
// Apply default file level build configurations to all file type specific
// ones.
const defaultConfiguration = resolvedConfiguration.build.types.default;
delete resolvedConfiguration.build.types.default;
for (const type in resolvedConfiguration.build.types) if (resolvedConfiguration.build.types.hasOwnProperty(type)) resolvedConfiguration.build.types[type] = _clientnode2.default.extendObject(true, {}, defaultConfiguration, _clientnode2.default.extendObject(true, { extension: type }, resolvedConfiguration.build.types[type], { type }));
// endregion
// region resolve module location and determine which asset types are needed
resolvedConfiguration.module.locations = _helper2.default.determineModuleLocations(resolvedConfiguration.injection.internal, resolvedConfiguration.module.aliases, resolvedConfiguration.module.replacements.normal, resolvedConfiguration.extensions, resolvedConfiguration.path.context, resolvedConfiguration.path.source.asset.base);
resolvedConfiguration.injection = _helper2.default.resolveInjection(resolvedConfiguration.injection, _helper2.default.resolveBuildConfigurationFilePaths(resolvedConfiguration.build.types, resolvedConfiguration.path.source.asset.base, _helper2.default.normalizePaths(resolvedConfiguration.path.ignore.concat(resolvedConfiguration.module.directoryNames, resolvedConfiguration.loader.directoryNames).map(filePath => _path2.default.resolve(resolvedConfiguration.path.context, filePath)).filter(filePath => !resolvedConfiguration.path.context.startsWith(filePath))), resolvedConfiguration.package.main.fileNames), resolvedConfiguration.injection.autoExclude, resolvedConfiguration.module.aliases, resolvedConfiguration.module.replacements.normal, resolvedConfiguration.extensions, resolvedConfiguration.path.context, resolvedConfiguration.path.source.asset.base, resolvedConfiguration.path.ignore);
const internalInjection = resolvedConfiguration.injection.internal;
resolvedConfiguration.injection.internal = {
    given: resolvedConfiguration.injection.internal,
    normalized: _helper2.default.resolveModulesInFolders(_helper2.default.normalizeInternalInjection(internalInjection), resolvedConfiguration.module.aliases, resolvedConfiguration.module.replacements.normal, resolvedConfiguration.path.context, resolvedConfiguration.path.source.asset.base, resolvedConfiguration.path.ignore.concat(resolvedConfiguration.module.directoryNames, resolvedConfiguration.loader.directoryNames).map(filePath => _path2.default.resolve(resolvedConfiguration.path.context, filePath)).filter(filePath => !resolvedConfiguration.path.context.startsWith(filePath))) };
resolvedConfiguration.needed = { javaScript: configuration.debug && ['serve', 'test:browser'].includes(resolvedConfiguration.givenCommandLineArguments[2]) };
for (const chunkName in resolvedConfiguration.injection.internal.normalized) if (resolvedConfiguration.injection.internal.normalized.hasOwnProperty(chunkName)) for (const moduleID of resolvedConfiguration.injection.internal.normalized[chunkName]) {
    const filePath = _helper2.default.determineModuleFilePath(moduleID, resolvedConfiguration.module.aliases, resolvedConfiguration.module.replacements.normal, resolvedConfiguration.extensions, resolvedConfiguration.path.context,
    /*
        NOTE: We doesn't use
        "resolvedConfiguration.path.source.asset.base" because we
        have already resolve all module ids.
    */
    './', resolvedConfiguration.path.ignore, resolvedConfiguration.module.directoryNames, resolvedConfiguration.package.main.fileNames, resolvedConfiguration.package.main.propertyNames, resolvedConfiguration.package.aliasPropertyNames, resolvedConfiguration.encoding);
    let type;
    if (filePath) type = _helper2.default.determineAssetType(filePath, resolvedConfiguration.build.types, resolvedConfiguration.path);else throw new Error(`Given request "${moduleID}" couldn't be resolved.`);
    if (type) resolvedConfiguration.needed[type] = true;
}
// endregion
// region adding special aliases
// NOTE: This alias couldn't be set in the "package.json" file since this would
// result in an endless loop.
resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader = '';
for (const loader of resolvedConfiguration.files.defaultHTML.template.use) {
    if (resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader) resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader += '!';
    resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader += loader.loader;
    if (loader.options) resolvedConfiguration.loader.aliases.webOptimizerDefaultTemplateFileLoader += '?' + _clientnode2.default.convertCircularObjectToJSON(loader.options);
}
resolvedConfiguration.module.aliases.webOptimizerDefaultTemplateFilePath$ = resolvedConfiguration.files.defaultHTML.template.filePath;
// endregion
// region apply html webpack plugin workarounds
/*
    NOTE: Provides a workaround to handle a bug with chained loader
    configurations.
*/
for (let htmlConfiguration of resolvedConfiguration.files.html) {
    _clientnode2.default.extendObject(true, htmlConfiguration, resolvedConfiguration.files.defaultHTML);
    htmlConfiguration.template.request = htmlConfiguration.template.filePath;
    if (htmlConfiguration.template.filePath !== resolvedConfiguration.files.defaultHTML.template.filePath && htmlConfiguration.template.options) {
        const requestString = new String(htmlConfiguration.template.request + _clientnode2.default.convertCircularObjectToJSON(htmlConfiguration.template.options));
        requestString.replace = (string => (_search, _replacement) => string)(htmlConfiguration.template.filePath);
        htmlConfiguration.template.request = requestString;
    }
}
// endregion
exports.default = resolvedConfiguration;
// region vim modline
// vim: set tabstop=4 shiftwidth=4 expandtab:
// vim: foldmethod=marker foldmarker=region,endregion:
// endregion

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZ3VyYXRvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUFXQTs7Ozs7O0FBQ0E7Ozs7QUFFQTs7SUFBWSxVOztBQUNaOzs7O0FBTUE7Ozs7QUFHQTs7Ozs7O0FBUkE7QUFDQSxJQUFJO0FBQ0EsWUFBUSw2QkFBUjtBQUNILENBRkQsQ0FFRSxPQUFPLEtBQVAsRUFBYyxDQUFFO0FBR2xCO0FBQ0E7O0FBT0E7O0FBTEE7QUFNQSxJQUFJLDBDQUFKO0FBQ0E7Ozs7OztBQU1BLGtCQUFrQixPQUFsQixDQUEwQixJQUExQixDQUErQixPQUEvQixHQUF5QyxTQUF6QztBQUNBLGtCQUFrQixPQUFsQixDQUEwQixXQUExQixHQUF3QyxNQUF4QztBQUNBLE9BQU8sSUFBUCxFQUFhO0FBQ1Qsc0JBQWtCLE9BQWxCLENBQTBCLElBQTFCLENBQStCLE9BQS9CLEdBQXlDLGVBQUssT0FBTCxDQUNyQyxrQkFBa0IsT0FBbEIsQ0FBMEIsSUFBMUIsQ0FBK0IsT0FETSxFQUNHLFFBREgsQ0FBekM7QUFFQSxRQUFJLGVBQUssUUFBTCxDQUFjLGVBQUssT0FBTCxDQUNkLGtCQUFrQixPQUFsQixDQUEwQixJQUExQixDQUErQixPQURqQixDQUFkLE1BRUcsY0FGUCxFQUdJO0FBQ1A7QUFDRCxJQUNJLGVBQUssUUFBTCxDQUFjLGVBQUssT0FBTCxDQUFhLFFBQVEsR0FBUixFQUFiLENBQWQsTUFBK0MsY0FBL0MsSUFDQSxlQUFLLFFBQUwsQ0FBYyxlQUFLLE9BQUwsQ0FBYSxRQUFRLEdBQVIsRUFBYixDQUFkLE1BQStDLFVBQS9DLElBQ0EsZUFBSyxRQUFMLENBQWMsZUFBSyxPQUFMLENBQWEsZUFBSyxPQUFMLENBQWEsUUFBUSxHQUFSLEVBQWIsQ0FBYixDQUFkLE1BQTZELGNBSGpFLEVBSUU7QUFDRTs7OztBQUlBLHNCQUFrQixPQUFsQixDQUEwQixJQUExQixDQUErQixPQUEvQixHQUF5QyxRQUFRLEdBQVIsRUFBekM7QUFDQSxzQkFBa0IsT0FBbEIsQ0FBMEIsV0FBMUIsR0FBd0MsWUFBeEM7QUFDSCxDQVhEO0FBWUk7Ozs7O0FBS0EsUUFBSTtBQUNBLFlBQUksV0FBVyxTQUFYLENBQXFCLGVBQUssSUFBTCxDQUFVLFFBQVEsR0FBUixFQUFWLEVBQ3RCLGNBRHNCLENBQXJCLEVBQ2dCLGNBRGhCLEVBQUosRUFFSSxrQkFBa0IsT0FBbEIsQ0FBMEIsSUFBMUIsQ0FBK0IsT0FBL0IsR0FBeUMsUUFBUSxHQUFSLEVBQXpDO0FBQ1AsS0FKRCxDQUlFLE9BQU8sS0FBUCxFQUFjLENBQUU7QUFDdEIsSUFBSSxxQkFBSjtBQUNBLElBQUk7QUFDQTtBQUNBLDRCQUF3QixLQUFLLFNBQUwsRUFBZ0IsZUFBSyxJQUFMLENBQ3BDLGtCQUFrQixPQUFsQixDQUEwQixJQUExQixDQUErQixPQURLLEVBQ0ksU0FESixDQUFoQixDQUF4QjtBQUVBO0FBQ0gsQ0FMRCxDQUtFLE9BQU8sS0FBUCxFQUFjO0FBQ1osNEJBQXdCLEVBQUMsTUFBTSxRQUFQLEVBQXhCO0FBQ0Esc0JBQWtCLE9BQWxCLENBQTBCLElBQTFCLENBQStCLE9BQS9CLEdBQXlDLFFBQVEsR0FBUixFQUF6QztBQUNIO0FBQ0QsTUFBTSxPQUFjLHNCQUFzQixJQUExQztBQUNBLHdCQUF3QixzQkFBc0IsWUFBdEIsSUFBc0MsRUFBOUQ7QUFDQSxzQkFBc0IsSUFBdEIsR0FBNkIsSUFBN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksUUFBZ0Isa0JBQWtCLE9BQWxCLENBQTBCLEtBQTlDO0FBQ0EsSUFBSSxzQkFBc0IsS0FBdEIsS0FBZ0MsU0FBcEMsRUFDSSxRQUFRLHNCQUFzQixLQUE5QixDQURKLEtBRUssSUFBSSxRQUFRLEdBQVIsQ0FBWSxjQUFaLEtBQStCLE1BQW5DLEVBQ0QsUUFBUSxJQUFSO0FBQ0osa0JBQWtCLE9BQWxCLENBQTBCLElBQTFCLENBQStCLE9BQS9CLElBQTBDLEdBQTFDO0FBQ0E7QUFDQTtBQUNBLE1BQU0sdUJBQW1DLGtCQUFrQixPQUEzRDtBQUNBLElBQUksYUFBSjtBQUNBLElBQUksS0FBSixFQUNJLGdCQUFnQixxQkFBTSxZQUFOLENBQW1CLElBQW5CLEVBQXlCLHFCQUFNLFlBQU4sQ0FDckMsa0JBQWtCLE9BRG1CLEVBQ1Ysa0JBQWtCLEtBRFIsQ0FBekIsRUFFYixrQkFBa0IsS0FGTCxDQUFoQixDQURKLEtBS0ksZ0JBQWdCLGtCQUFrQixPQUFsQztBQUNKLGNBQWMsS0FBZCxHQUFzQixLQUF0QjtBQUNBLElBQUksT0FBTyxjQUFjLE9BQXJCLEtBQWlDLFFBQXJDLEVBQ0kscUJBQU0sWUFBTixDQUFtQixJQUFuQixFQUF5QixxQkFBTSxZQUFOLENBQ3JCLG9CQURxQixFQUNDLGNBQWMsT0FEZixDQUF6QixFQUVHLGNBQWMsT0FGakI7QUFHSixJQUNJLGFBQWEscUJBQWIsSUFDQSxzQkFBc0IsT0FBdEIsS0FBa0MsSUFEbEMsSUFDMEMsQ0FDdEMsYUFBYSxxQkFBYixJQUNBLHNCQUFzQixPQUF0QixLQUFrQyxTQURsQyxJQUVBLEVBQUUsYUFBYSxxQkFBZixDQUhzQyxLQUlyQyxjQUFjLE9BTnZCLEVBUUksZ0JBQWdCLHFCQUFNLFlBQU4sQ0FBbUIsSUFBbkIsRUFBeUIscUJBQU0sWUFBTixDQUNyQyxhQURxQyxFQUN0QixvQkFEc0IsQ0FBekIsRUFFYixvQkFGYSxDQUFoQjtBQUdKO0FBQ0E7Ozs7QUFJQTtBQUNBLElBQUksUUFBZSxDQUFuQjtBQUNBLElBQUksV0FBbUIsSUFBdkI7QUFDQSxPQUFPLElBQVAsRUFBYTtBQUNULFVBQU0sY0FBcUIsY0FBYyxJQUFkLENBQW1CLE9BQW5CLEdBQ3RCLHlCQUF3QixLQUFNLE9BRG5DO0FBRUEsUUFBSSxDQUFDLHFCQUFNLFVBQU4sQ0FBaUIsV0FBakIsQ0FBTCxFQUNJO0FBQ0osZUFBVyxXQUFYO0FBQ0EsYUFBUyxDQUFUO0FBQ0g7QUFDRCxJQUFJLHFCQUFpQztBQUNqQywrQkFBMkIsUUFBUTtBQURGLENBQXJDO0FBR0EsSUFBSSxRQUFKLEVBQWM7QUFDVix5QkFBcUIsS0FBSyxLQUFMLENBQVcsV0FBVyxZQUFYLENBQXdCLFFBQXhCLEVBQWtDO0FBQzlELGtCQUFXLGNBQWMsUUFEcUMsRUFBbEMsQ0FBWCxDQUFyQjtBQUVBLGVBQVcsTUFBWCxDQUFrQixRQUFsQixFQUE2QixLQUFELElBQXVCO0FBQy9DLFlBQUksS0FBSixFQUNJLE1BQU0sS0FBTjtBQUNQLEtBSEQ7QUFJSDtBQUNEO0FBQ0EsSUFBSSxtQkFBbUIseUJBQW5CLENBQTZDLE1BQTdDLEdBQXNELENBQTFELEVBQ0ksS0FBSyxNQUFNLElBQVgsSUFBMEIsQ0FBQyxVQUFELEVBQWEsTUFBYixFQUFxQixjQUFyQixDQUExQixFQUNJLElBQUksbUJBQW1CLHlCQUFuQixDQUE2QyxDQUE3QyxNQUFvRCxJQUF4RCxFQUNJLHFCQUFNLFlBQU4sQ0FBbUIsSUFBbkIsRUFBeUIscUJBQU0sWUFBTixDQUNyQixhQURxQixFQUNOLGNBQWMsSUFBZCxDQURNLENBQXpCLEVBRUcsY0FBYyxJQUFkLENBRkg7QUFHWjtBQUNBLEtBQUssTUFBTSxJQUFYLElBQTBCLENBQUMsVUFBRCxFQUFhLE1BQWIsRUFBcUIsY0FBckIsQ0FBMUIsRUFDSSxPQUFPLGNBQWMsSUFBZCxDQUFQO0FBQ0o7QUFDQSxxQkFBTSxZQUFOLENBQW1CLElBQW5CLEVBQXlCLHFCQUFNLFlBQU4sQ0FBbUIscUJBQU0sWUFBTixDQUN4QyxhQUR3QyxFQUN6QixxQkFEeUIsQ0FBbkIsRUFFdEIsa0JBRnNCLENBQXpCLEVBRXdCLHFCQUZ4QixFQUUrQyxrQkFGL0M7QUFHQSxJQUFJLFNBQXNCLElBQTFCO0FBQ0EsSUFBSSxtQkFBbUIseUJBQW5CLENBQTZDLE1BQTdDLEdBQXNELENBQTFELEVBQ0ksU0FBUyxxQkFBTSx3QkFBTixDQUNMLG1CQUFtQix5QkFBbkIsQ0FBNkMsbUJBQ3hDLHlCQUR3QyxDQUNkLE1BRGMsR0FDTCxDQUR4QyxDQURLLEVBR0wsYUFISyxFQUdVLGVBSFYsQ0FBVDtBQUlKLElBQUkscUJBQU0sYUFBTixDQUFvQixNQUFwQixDQUFKLEVBQ0kscUJBQU0sWUFBTixDQUFtQixJQUFuQixFQUF5QixxQkFBTSxZQUFOLENBQW1CLGFBQW5CLEVBQWtDLE1BQWxDLENBQXpCLEVBQW9FLE1BQXBFO0FBQ0o7QUFDQSxjQUFjLG9CQUFkLEdBQXFDLEVBQXJDO0FBQ0EsSUFBSSxxQkFBTSxlQUFOLENBQXNCLGNBQWMsSUFBZCxDQUFtQixNQUFuQixDQUEwQixJQUFoRCxDQUFKLEVBQ0ksS0FBSyxNQUFNLFFBQVgsSUFBOEIsV0FBVyxXQUFYLENBQzFCLGNBQWMsSUFBZCxDQUFtQixNQUFuQixDQUEwQixJQURBLENBQTlCLEVBR0ksSUFBSSxTQUFTLEtBQVQsQ0FBZSwwQkFBZixDQUFKLEVBQ0ksY0FBYyxvQkFBZCxDQUFtQyxJQUFuQyxDQUF3QyxlQUFLLE9BQUwsQ0FDcEMsY0FBYyxJQUFkLENBQW1CLE1BQW5CLENBQTBCLElBRFUsRUFDSixRQURJLENBQXhDO0FBRVo7QUFDQTtBQUNBLE1BQU0sdUJBQXFDLENBQ3ZDLGFBRHVDLEVBQ3hCLFlBRHdCLEVBQ1YsUUFEVSxFQUNBLE1BREEsRUFDUSxTQURSLEVBQ21CLE9BRG5CLEVBRXZDLGtCQUZ1QyxFQUVuQixLQUZtQixFQUVaLGlCQUZZLENBQTNDO0FBR0EsTUFBTSxNQUFXLElBQUksSUFBSixFQUFqQjtBQUNBLE1BQU0sa0JBQXlCLEtBQUssR0FBTCxDQUMzQixJQUFJLGNBQUosRUFEMkIsRUFDTCxJQUFJLFdBQUosRUFESyxFQUNjLElBQUksVUFBSixFQURkLEVBRTNCLElBQUksV0FBSixFQUYyQixFQUVSLElBQUksYUFBSixFQUZRLEVBRWEsSUFBSSxhQUFKLEVBRmIsRUFHM0IsSUFBSSxrQkFBSixFQUgyQixDQUEvQjtBQUlBO0FBQ0EsTUFBTSxZQUF1QixDQUN6QixRQUFRLEdBQVIsRUFEeUIsRUFDVixVQURVLG9DQUNnQixLQUFLLFNBQUwsQ0FEaEIsd0JBQ3dDLFNBRHhDLEVBRXpCLEdBRnlCLEVBRXBCLGVBRm9CLENBQTdCO0FBR0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxJQUFkLENBQW1CLElBQW5CLEdBQTBCLGVBQUssT0FBTCxDQUN0QixjQUFjLElBQWQsQ0FBbUIsT0FERyxFQUNNLGNBQWMsSUFBZCxDQUFtQixJQUR6QixDQUExQjtBQUVBLEtBQUssTUFBTSxHQUFYLElBQXlCLGNBQWMsSUFBdkMsRUFDSSxJQUNJLGNBQWMsSUFBZCxDQUFtQixjQUFuQixDQUFrQyxHQUFsQyxLQUEwQyxRQUFRLE1BQWxELElBQ0EsT0FBTyxjQUFjLElBQWQsQ0FBbUIsR0FBbkIsQ0FBUCxLQUFtQyxRQUZ2QyxFQUlJLGNBQWMsSUFBZCxDQUFtQixHQUFuQixJQUEwQixlQUFLLE9BQUwsQ0FDdEIsY0FBYyxJQUFkLENBQW1CLElBREcsRUFDRyxjQUFjLElBQWQsQ0FBbUIsR0FBbkIsQ0FESCxJQUV0QixHQUZKLENBSkosS0FPSyxJQUFJLHFCQUFNLGFBQU4sQ0FBb0IsY0FBYyxJQUFkLENBQW1CLEdBQW5CLENBQXBCLENBQUosRUFBa0Q7QUFDbkQsa0JBQWMsSUFBZCxDQUFtQixHQUFuQixFQUF3QixJQUF4QixHQUErQixlQUFLLE9BQUwsQ0FDM0IsY0FBYyxJQUFkLENBQW1CLElBRFEsRUFDRixjQUFjLElBQWQsQ0FBbUIsR0FBbkIsRUFBd0IsSUFEdEIsQ0FBL0I7QUFFQSxTQUFLLE1BQU0sTUFBWCxJQUE0QixjQUFjLElBQWQsQ0FBbUIsR0FBbkIsQ0FBNUIsRUFDSSxJQUNJLGNBQWMsSUFBZCxDQUFtQixHQUFuQixFQUF3QixjQUF4QixDQUF1QyxNQUF2QyxLQUNBLENBQUMsQ0FBQyxNQUFELEVBQVMsUUFBVCxFQUFtQixRQUFuQixDQUE0QixNQUE1QixDQURELElBRUEsT0FBTyxjQUFjLElBQWQsQ0FBbUIsR0FBbkIsRUFBd0IsTUFBeEIsQ0FBUCxLQUEyQyxRQUgvQyxFQUtJLGNBQWMsSUFBZCxDQUFtQixHQUFuQixFQUF3QixNQUF4QixJQUFrQyxlQUFLLE9BQUwsQ0FDOUIsY0FBYyxJQUFkLENBQW1CLEdBQW5CLEVBQXdCLElBRE0sRUFFOUIsY0FBYyxJQUFkLENBQW1CLEdBQW5CLEVBQXdCLE1BQXhCLENBRjhCLElBRzlCLEdBSEosQ0FMSixLQVNLLElBQUkscUJBQU0sYUFBTixDQUFvQixjQUFjLElBQWQsQ0FBbUIsR0FBbkIsRUFBd0IsTUFBeEIsQ0FBcEIsQ0FBSixFQUEwRDtBQUMzRCxzQkFBYyxJQUFkLENBQW1CLEdBQW5CLEVBQXdCLE1BQXhCLEVBQWdDLElBQWhDLEdBQXVDLGVBQUssT0FBTCxDQUNuQyxjQUFjLElBQWQsQ0FBbUIsR0FBbkIsRUFBd0IsSUFEVyxFQUVuQyxjQUFjLElBQWQsQ0FBbUIsR0FBbkIsRUFBd0IsTUFBeEIsRUFBZ0MsSUFGRyxDQUF2QztBQUdBLGFBQUssTUFBTSxTQUFYLElBQStCLGNBQWMsSUFBZCxDQUFtQixHQUFuQixFQUF3QixNQUF4QixDQUEvQixFQUNJLElBQUksY0FBYyxJQUFkLENBQW1CLEdBQW5CLEVBQXdCLE1BQXhCLEVBQWdDLGNBQWhDLENBQ0EsU0FEQSxLQUVDLGNBQWMsTUFGZixJQUdKLE9BQU8sY0FBYyxJQUFkLENBQW1CLEdBQW5CLEVBQXdCLE1BQXhCLEVBQ0gsU0FERyxDQUFQLEtBRU0sUUFMTixFQU1JLGNBQWMsSUFBZCxDQUFtQixHQUFuQixFQUF3QixNQUF4QixFQUFnQyxTQUFoQyxJQUNJLGVBQUssT0FBTCxDQUNJLGNBQWMsSUFBZCxDQUFtQixHQUFuQixFQUF3QixNQUF4QixFQUFnQyxJQURwQyxFQUVJLGNBQWMsSUFBZCxDQUFtQixHQUFuQixFQUF3QixNQUF4QixFQUFnQyxTQUFoQyxDQUZKLElBR0ksR0FKUjtBQUtYO0FBQ1I7QUFDTDtBQUNBLE1BQU0sd0JBQ0YscUJBQU0sMkJBQU4sQ0FDSSxhQURKLEVBQ21CLG9CQURuQixFQUN5QyxTQUR6QyxDQURKO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHVCQUNGLHNCQUFzQixLQUF0QixDQUE0QixLQUE1QixDQUFrQyxPQUR0QztBQUVBLE9BQU8sc0JBQXNCLEtBQXRCLENBQTRCLEtBQTVCLENBQWtDLE9BQXpDO0FBQ0EsS0FBSyxNQUFNLElBQVgsSUFBMEIsc0JBQXNCLEtBQXRCLENBQTRCLEtBQXRELEVBQ0ksSUFBSSxzQkFBc0IsS0FBdEIsQ0FBNEIsS0FBNUIsQ0FBa0MsY0FBbEMsQ0FBaUQsSUFBakQsQ0FBSixFQUNJLHNCQUFzQixLQUF0QixDQUE0QixLQUE1QixDQUFrQyxJQUFsQyxJQUEwQyxxQkFBTSxZQUFOLENBQW1CLElBQW5CLEVBQXlCLEVBQXpCLEVBQ3ZDLG9CQUR1QyxFQUNqQixxQkFBTSxZQUFOLENBQ3JCLElBRHFCLEVBQ2YsRUFBQyxXQUFXLElBQVosRUFEZSxFQUNJLHNCQUFzQixLQUF0QixDQUE0QixLQUE1QixDQUFrQyxJQUFsQyxDQURKLEVBRXJCLEVBQUMsSUFBRCxFQUZxQixDQURpQixDQUExQztBQUlSO0FBQ0E7QUFDQSxzQkFBc0IsTUFBdEIsQ0FBNkIsU0FBN0IsR0FBeUMsaUJBQU8sd0JBQVAsQ0FDckMsc0JBQXNCLFNBQXRCLENBQWdDLFFBREssRUFFckMsc0JBQXNCLE1BQXRCLENBQTZCLE9BRlEsRUFHckMsc0JBQXNCLE1BQXRCLENBQTZCLFlBQTdCLENBQTBDLE1BSEwsRUFJckMsc0JBQXNCLFVBSmUsRUFJSCxzQkFBc0IsSUFBdEIsQ0FBMkIsT0FKeEIsRUFLckMsc0JBQXNCLElBQXRCLENBQTJCLE1BQTNCLENBQWtDLEtBQWxDLENBQXdDLElBTEgsQ0FBekM7QUFNQSxzQkFBc0IsU0FBdEIsR0FBa0MsaUJBQU8sZ0JBQVAsQ0FDOUIsc0JBQXNCLFNBRFEsRUFDRyxpQkFBTyxrQ0FBUCxDQUM3QixzQkFBc0IsS0FBdEIsQ0FBNEIsS0FEQyxFQUU3QixzQkFBc0IsSUFBdEIsQ0FBMkIsTUFBM0IsQ0FBa0MsS0FBbEMsQ0FBd0MsSUFGWCxFQUc3QixpQkFBTyxjQUFQLENBQXNCLHNCQUFzQixJQUF0QixDQUEyQixNQUEzQixDQUFrQyxNQUFsQyxDQUNsQixzQkFBc0IsTUFBdEIsQ0FBNkIsY0FEWCxFQUVsQixzQkFBc0IsTUFBdEIsQ0FBNkIsY0FGWCxFQUdwQixHQUhvQixDQUdmLFFBQUQsSUFBNEIsZUFBSyxPQUFMLENBQzlCLHNCQUFzQixJQUF0QixDQUEyQixPQURHLEVBQ00sUUFETixDQUhaLEVBS3BCLE1BTG9CLENBS1osUUFBRCxJQUNMLENBQUMsc0JBQXNCLElBQXRCLENBQTJCLE9BQTNCLENBQW1DLFVBQW5DLENBQThDLFFBQTlDLENBTmlCLENBQXRCLENBSDZCLEVBVTdCLHNCQUFzQixPQUF0QixDQUE4QixJQUE5QixDQUFtQyxTQVZOLENBREgsRUFZM0Isc0JBQXNCLFNBQXRCLENBQWdDLFdBWkwsRUFhOUIsc0JBQXNCLE1BQXRCLENBQTZCLE9BYkMsRUFjOUIsc0JBQXNCLE1BQXRCLENBQTZCLFlBQTdCLENBQTBDLE1BZFosRUFlOUIsc0JBQXNCLFVBZlEsRUFnQjlCLHNCQUFzQixJQUF0QixDQUEyQixPQWhCRyxFQWlCOUIsc0JBQXNCLElBQXRCLENBQTJCLE1BQTNCLENBQWtDLEtBQWxDLENBQXdDLElBakJWLEVBa0I5QixzQkFBc0IsSUFBdEIsQ0FBMkIsTUFsQkcsQ0FBbEM7QUFtQkEsTUFBTSxvQkFBd0Isc0JBQXNCLFNBQXRCLENBQWdDLFFBQTlEO0FBQ0Esc0JBQXNCLFNBQXRCLENBQWdDLFFBQWhDLEdBQTJDO0FBQ3ZDLFdBQU8sc0JBQXNCLFNBQXRCLENBQWdDLFFBREE7QUFFdkMsZ0JBQVksaUJBQU8sdUJBQVAsQ0FDUixpQkFBTywwQkFBUCxDQUFrQyxpQkFBbEMsQ0FEUSxFQUVSLHNCQUFzQixNQUF0QixDQUE2QixPQUZyQixFQUdSLHNCQUFzQixNQUF0QixDQUE2QixZQUE3QixDQUEwQyxNQUhsQyxFQUlSLHNCQUFzQixJQUF0QixDQUEyQixPQUpuQixFQUtSLHNCQUFzQixJQUF0QixDQUEyQixNQUEzQixDQUFrQyxLQUFsQyxDQUF3QyxJQUxoQyxFQU1SLHNCQUFzQixJQUF0QixDQUEyQixNQUEzQixDQUFrQyxNQUFsQyxDQUNJLHNCQUFzQixNQUF0QixDQUE2QixjQURqQyxFQUVJLHNCQUFzQixNQUF0QixDQUE2QixjQUZqQyxFQUdFLEdBSEYsQ0FHTyxRQUFELElBQTRCLGVBQUssT0FBTCxDQUM5QixzQkFBc0IsSUFBdEIsQ0FBMkIsT0FERyxFQUNNLFFBRE4sQ0FIbEMsRUFLRSxNQUxGLENBS1UsUUFBRCxJQUNMLENBQUMsc0JBQXNCLElBQXRCLENBQTJCLE9BQTNCLENBQW1DLFVBQW5DLENBQThDLFFBQTlDLENBTkwsQ0FOUSxDQUYyQixFQUEzQztBQWVBLHNCQUFzQixNQUF0QixHQUErQixFQUFDLFlBQVksY0FBYyxLQUFkLElBQXVCLENBQy9ELE9BRCtELEVBQ3RELGNBRHNELEVBRWpFLFFBRmlFLENBRXhELHNCQUFzQix5QkFBdEIsQ0FBZ0QsQ0FBaEQsQ0FGd0QsQ0FBcEMsRUFBL0I7QUFHQSxLQUFLLE1BQU0sU0FBWCxJQUErQixzQkFBc0IsU0FBdEIsQ0FBZ0MsUUFBaEMsQ0FDMUIsVUFETCxFQUdJLElBQUksc0JBQXNCLFNBQXRCLENBQWdDLFFBQWhDLENBQXlDLFVBQXpDLENBQW9ELGNBQXBELENBQ0EsU0FEQSxDQUFKLEVBR0ksS0FBSyxNQUFNLFFBQVgsSUFBOEIsc0JBQXNCLFNBQXRCLENBQWdDLFFBQWhDLENBQ3pCLFVBRHlCLENBQ2QsU0FEYyxDQUE5QixFQUVFO0FBQ0UsVUFBTSxXQUFtQixpQkFBTyx1QkFBUCxDQUNyQixRQURxQixFQUNYLHNCQUFzQixNQUF0QixDQUE2QixPQURsQixFQUVyQixzQkFBc0IsTUFBdEIsQ0FBNkIsWUFBN0IsQ0FBMEMsTUFGckIsRUFHckIsc0JBQXNCLFVBSEQsRUFJckIsc0JBQXNCLElBQXRCLENBQTJCLE9BSk47QUFLckI7Ozs7O0FBS0EsUUFWcUIsRUFXckIsc0JBQXNCLElBQXRCLENBQTJCLE1BWE4sRUFZckIsc0JBQXNCLE1BQXRCLENBQTZCLGNBWlIsRUFhckIsc0JBQXNCLE9BQXRCLENBQThCLElBQTlCLENBQW1DLFNBYmQsRUFjckIsc0JBQXNCLE9BQXRCLENBQThCLElBQTlCLENBQW1DLGFBZGQsRUFlckIsc0JBQXNCLE9BQXRCLENBQThCLGtCQWZULEVBZ0JyQixzQkFBc0IsUUFoQkQsQ0FBekI7QUFpQkEsUUFBSSxJQUFKO0FBQ0EsUUFBSSxRQUFKLEVBQ0ksT0FBTyxpQkFBTyxrQkFBUCxDQUNILFFBREcsRUFDTyxzQkFBc0IsS0FBdEIsQ0FBNEIsS0FEbkMsRUFFSCxzQkFBc0IsSUFGbkIsQ0FBUCxDQURKLEtBS0ksTUFBTSxJQUFJLEtBQUosQ0FDRCxrQkFBaUIsUUFBUyx5QkFEekIsQ0FBTjtBQUVKLFFBQUksSUFBSixFQUNJLHNCQUFzQixNQUF0QixDQUE2QixJQUE3QixJQUFxQyxJQUFyQztBQUNQO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsTUFBdEIsQ0FBNkIsT0FBN0IsQ0FBcUMscUNBQXJDLEdBQTZFLEVBQTdFO0FBQ0EsS0FBSyxNQUFNLE1BQVgsSUFBaUMsc0JBQXNCLEtBQXRCLENBQTRCLFdBQTVCLENBQzVCLFFBRDRCLENBQ25CLEdBRGQsRUFFRTtBQUNFLFFBQ0ksc0JBQXNCLE1BQXRCLENBQTZCLE9BQTdCLENBQ0MscUNBRkwsRUFJSSxzQkFBc0IsTUFBdEIsQ0FBNkIsT0FBN0IsQ0FDSyxxQ0FETCxJQUM4QyxHQUQ5QztBQUVKLDBCQUFzQixNQUF0QixDQUE2QixPQUE3QixDQUNLLHFDQURMLElBQzhDLE9BQU8sTUFEckQ7QUFFQSxRQUFJLE9BQU8sT0FBWCxFQUNJLHNCQUFzQixNQUF0QixDQUE2QixPQUE3QixDQUNLLHFDQURMLElBQzhDLE1BQ3RDLHFCQUFNLDJCQUFOLENBQWtDLE9BQU8sT0FBekMsQ0FGUjtBQUdQO0FBQ0Qsc0JBQXNCLE1BQXRCLENBQTZCLE9BQTdCLENBQXFDLG9DQUFyQyxHQUNJLHNCQUFzQixLQUF0QixDQUE0QixXQUE1QixDQUF3QyxRQUF4QyxDQUFpRCxRQURyRDtBQUVBO0FBQ0E7QUFDQTs7OztBQUlBLEtBQ0ksSUFBSSxpQkFEUixJQUMrQyxzQkFBc0IsS0FBdEIsQ0FBNEIsSUFEM0UsRUFFRTtBQUNFLHlCQUFNLFlBQU4sQ0FDSSxJQURKLEVBQ1UsaUJBRFYsRUFDNkIsc0JBQXNCLEtBQXRCLENBQTRCLFdBRHpEO0FBRUEsc0JBQWtCLFFBQWxCLENBQTJCLE9BQTNCLEdBQXFDLGtCQUFrQixRQUFsQixDQUEyQixRQUFoRTtBQUNBLFFBQ0ksa0JBQWtCLFFBQWxCLENBQTJCLFFBQTNCLEtBQ0ksc0JBQXNCLEtBQXRCLENBQTRCLFdBQTVCLENBQXdDLFFBQXhDLENBQWlELFFBRHJELElBRUEsa0JBQWtCLFFBQWxCLENBQTJCLE9BSC9CLEVBSUU7QUFDRSxjQUFNLGdCQUF1QixJQUFJLE1BQUosQ0FDekIsa0JBQWtCLFFBQWxCLENBQTJCLE9BQTNCLEdBQ0EscUJBQU0sMkJBQU4sQ0FDSSxrQkFBa0IsUUFBbEIsQ0FBMkIsT0FEL0IsQ0FGeUIsQ0FBN0I7QUFJQSxzQkFBYyxPQUFkLEdBQXdCLENBQUUsTUFBRCxJQUE0QixDQUNqRCxPQURpRCxFQUMxQixZQUQwQixLQUl6QyxNQUpZLEVBSUosa0JBQWtCLFFBQWxCLENBQTJCLFFBSnZCLENBQXhCO0FBS0EsMEJBQWtCLFFBQWxCLENBQTJCLE9BQTNCLEdBQXFDLGFBQXJDO0FBQ0g7QUFDSjtBQUNEO2tCQUNlLHFCO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiY29uZmlndXJhdG9yLmNvbXBpbGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBAZmxvd1xuLy8gLSotIGNvZGluZzogdXRmLTggLSotXG4ndXNlIHN0cmljdCdcbi8qICFcbiAgICByZWdpb24gaGVhZGVyXG4gICAgQ29weXJpZ2h0IFRvcmJlbiBTaWNrZXJ0IChpbmZvW1wifmF0flwiXXRvcmJlbi53ZWJzaXRlKSAxNi4xMi4yMDEyXG5cbiAgICBMaWNlbnNlXG4gICAgLS0tLS0tLVxuXG4gICAgVGhpcyBsaWJyYXJ5IHdyaXR0ZW4gYnkgVG9yYmVuIFNpY2tlcnQgc3RhbmQgdW5kZXIgYSBjcmVhdGl2ZSBjb21tb25zIG5hbWluZ1xuICAgIDMuMCB1bnBvcnRlZCBsaWNlbnNlLiBzZWUgaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnkvMy4wL2RlZWQuZGVcbiAgICBlbmRyZWdpb25cbiovXG4vLyByZWdpb24gaW1wb3J0c1xuaW1wb3J0IFRvb2xzIGZyb20gJ2NsaWVudG5vZGUnXG5pbXBvcnQgdHlwZSB7UGxhaW5PYmplY3R9IGZyb20gJ2NsaWVudG5vZGUnXG5pbXBvcnQgKiBhcyBmaWxlU3lzdGVtIGZyb20gJ2ZzJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbi8vIE5PVEU6IE9ubHkgbmVlZGVkIGZvciBkZWJ1Z2dpbmcgdGhpcyBmaWxlLlxudHJ5IHtcbiAgICByZXF1aXJlKCdzb3VyY2UtbWFwLXN1cHBvcnQvcmVnaXN0ZXInKVxufSBjYXRjaCAoZXJyb3IpIHt9XG5cbmltcG9ydCBIZWxwZXIgZnJvbSAnLi9oZWxwZXIuY29tcGlsZWQnXG4vLyBOT1RFOiBcIntjb25maWd1cmF0aW9uIGFzIG1ldGFDb25maWd1cmF0aW9ufVwiIHdvdWxkIHJlc3VsdCBpbiBhIHJlYWQgb25seVxuLy8gdmFyaWFibGUgbmFtZWQgXCJtZXRhQ29uZmlndXJhdGlvblwiLlxuaW1wb3J0IHtjb25maWd1cmF0aW9uIGFzIGdpdmVuTWV0YUNvbmZpZ3VyYXRpb259IGZyb20gJy4vcGFja2FnZSdcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5pbXBvcnQgdHlwZSB7XG4gICAgRGVmYXVsdENvbmZpZ3VyYXRpb24sIEhUTUxDb25maWd1cmF0aW9uLCBJbnRlcm5hbEluamVjdGlvbixcbiAgICBNZXRhQ29uZmlndXJhdGlvbiwgUmVzb2x2ZWRDb25maWd1cmF0aW9uXG59IGZyb20gJy4vdHlwZSdcbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cbmxldCBtZXRhQ29uZmlndXJhdGlvbjpNZXRhQ29uZmlndXJhdGlvbiA9IGdpdmVuTWV0YUNvbmZpZ3VyYXRpb25cbi8qXG4gICAgVG8gYXNzdW1lIHRvIGdvIHR3byBmb2xkZXIgdXAgZnJvbSB0aGlzIGZpbGUgdW50aWwgdGhlcmUgaXMgbm9cbiAgICBcIm5vZGVfbW9kdWxlc1wiIHBhcmVudCBmb2xkZXIgaXMgdXN1YWxseSByZXNpbGllbnQgYWdhaW4gZGVhbGluZyB3aXRoXG4gICAgcHJvamVjdHMgd2hlcmUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBpc24ndCB0aGUgcHJvamVjdHMgZGlyZWN0b3J5IGFuZFxuICAgIHRoaXMgbGlicmFyeSBpcyBsb2NhdGVkIGFzIGEgbmVzdGVkIGRlcGVuZGVuY3kuXG4qL1xubWV0YUNvbmZpZ3VyYXRpb24uZGVmYXVsdC5wYXRoLmNvbnRleHQgPSBfX2Rpcm5hbWVcbm1ldGFDb25maWd1cmF0aW9uLmRlZmF1bHQuY29udGV4dFR5cGUgPSAnbWFpbidcbndoaWxlICh0cnVlKSB7XG4gICAgbWV0YUNvbmZpZ3VyYXRpb24uZGVmYXVsdC5wYXRoLmNvbnRleHQgPSBwYXRoLnJlc29sdmUoXG4gICAgICAgIG1ldGFDb25maWd1cmF0aW9uLmRlZmF1bHQucGF0aC5jb250ZXh0LCAnLi4vLi4vJylcbiAgICBpZiAocGF0aC5iYXNlbmFtZShwYXRoLmRpcm5hbWUoXG4gICAgICAgIG1ldGFDb25maWd1cmF0aW9uLmRlZmF1bHQucGF0aC5jb250ZXh0XG4gICAgKSkgIT09ICdub2RlX21vZHVsZXMnKVxuICAgICAgICBicmVha1xufVxuaWYgKFxuICAgIHBhdGguYmFzZW5hbWUocGF0aC5kaXJuYW1lKHByb2Nlc3MuY3dkKCkpKSA9PT0gJ25vZGVfbW9kdWxlcycgfHxcbiAgICBwYXRoLmJhc2VuYW1lKHBhdGguZGlybmFtZShwcm9jZXNzLmN3ZCgpKSkgPT09ICcuc3RhZ2luZycgJiZcbiAgICBwYXRoLmJhc2VuYW1lKHBhdGguZGlybmFtZShwYXRoLmRpcm5hbWUocHJvY2Vzcy5jd2QoKSkpKSA9PT0gJ25vZGVfbW9kdWxlcydcbikge1xuICAgIC8qXG4gICAgICAgIE5PVEU6IElmIHdlIGFyZSBkZWFsaW5nIHdhcyBhIGRlcGVuZGVuY3kgcHJvamVjdCB1c2UgY3VycmVudCBkaXJlY3RvcnlcbiAgICAgICAgYXMgY29udGV4dC5cbiAgICAqL1xuICAgIG1ldGFDb25maWd1cmF0aW9uLmRlZmF1bHQucGF0aC5jb250ZXh0ID0gcHJvY2Vzcy5jd2QoKVxuICAgIG1ldGFDb25maWd1cmF0aW9uLmRlZmF1bHQuY29udGV4dFR5cGUgPSAnZGVwZW5kZW5jeSdcbn0gZWxzZVxuICAgIC8qXG4gICAgICAgIE5PVEU6IElmIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IHJlZmVyZW5jZXMgdGhpcyBmaWxlIHZpYSBhXG4gICAgICAgIGxpbmtlZCBcIm5vZGVfbW9kdWxlc1wiIGZvbGRlciB1c2luZyBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IGFzIGNvbnRleHRcbiAgICAgICAgaXMgYSBiZXR0ZXIgYXNzdW1wdGlvbiB0aGFuIHR3byBmb2xkZXJzIHVwIHRoZSBoaWVyYXJjaHkuXG4gICAgKi9cbiAgICB0cnkge1xuICAgICAgICBpZiAoZmlsZVN5c3RlbS5sc3RhdFN5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKFxuICAgICAgICApLCAnbm9kZV9tb2R1bGVzJykpLmlzU3ltYm9saWNMaW5rKCkpXG4gICAgICAgICAgICBtZXRhQ29uZmlndXJhdGlvbi5kZWZhdWx0LnBhdGguY29udGV4dCA9IHByb2Nlc3MuY3dkKClcbiAgICB9IGNhdGNoIChlcnJvcikge31cbmxldCBzcGVjaWZpY0NvbmZpZ3VyYXRpb246UGxhaW5PYmplY3RcbnRyeSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tZXZhbCAqL1xuICAgIHNwZWNpZmljQ29uZmlndXJhdGlvbiA9IGV2YWwoJ3JlcXVpcmUnKShwYXRoLmpvaW4oXG4gICAgICAgIG1ldGFDb25maWd1cmF0aW9uLmRlZmF1bHQucGF0aC5jb250ZXh0LCAncGFja2FnZScpKVxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tZXZhbCAqL1xufSBjYXRjaCAoZXJyb3IpIHtcbiAgICBzcGVjaWZpY0NvbmZpZ3VyYXRpb24gPSB7bmFtZTogJ21vY2t1cCd9XG4gICAgbWV0YUNvbmZpZ3VyYXRpb24uZGVmYXVsdC5wYXRoLmNvbnRleHQgPSBwcm9jZXNzLmN3ZCgpXG59XG5jb25zdCBuYW1lOnN0cmluZyA9IHNwZWNpZmljQ29uZmlndXJhdGlvbi5uYW1lXG5zcGVjaWZpY0NvbmZpZ3VyYXRpb24gPSBzcGVjaWZpY0NvbmZpZ3VyYXRpb24ud2ViT3B0aW1pemVyIHx8IHt9XG5zcGVjaWZpY0NvbmZpZ3VyYXRpb24ubmFtZSA9IG5hbWVcbi8vIGVuZHJlZ2lvblxuLy8gcmVnaW9uIGxvYWRpbmcgZGVmYXVsdCBjb25maWd1cmF0aW9uXG4vLyBOT1RFOiBHaXZlbiBub2RlIGNvbW1hbmQgbGluZSBhcmd1bWVudHMgcmVzdWx0cyBpbiBcIm5wbV9jb25maWdfKlwiXG4vLyBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG5sZXQgZGVidWc6Ym9vbGVhbiA9IG1ldGFDb25maWd1cmF0aW9uLmRlZmF1bHQuZGVidWdcbmlmIChzcGVjaWZpY0NvbmZpZ3VyYXRpb24uZGVidWcgIT09IHVuZGVmaW5lZClcbiAgICBkZWJ1ZyA9IHNwZWNpZmljQ29uZmlndXJhdGlvbi5kZWJ1Z1xuZWxzZSBpZiAocHJvY2Vzcy5lbnYubnBtX2NvbmZpZ19kZXYgPT09ICd0cnVlJylcbiAgICBkZWJ1ZyA9IHRydWVcbm1ldGFDb25maWd1cmF0aW9uLmRlZmF1bHQucGF0aC5jb250ZXh0ICs9ICcvJ1xuLy8gTWVyZ2VzIGZpbmFsIGRlZmF1bHQgY29uZmlndXJhdGlvbiBvYmplY3QgZGVwZW5kaW5nIG9uIGdpdmVuIHRhcmdldFxuLy8gZW52aXJvbm1lbnQuXG5jb25zdCBsaWJyYXJ5Q29uZmlndXJhdGlvbjpQbGFpbk9iamVjdCA9IG1ldGFDb25maWd1cmF0aW9uLmxpYnJhcnlcbmxldCBjb25maWd1cmF0aW9uOkRlZmF1bHRDb25maWd1cmF0aW9uXG5pZiAoZGVidWcpXG4gICAgY29uZmlndXJhdGlvbiA9IFRvb2xzLmV4dGVuZE9iamVjdCh0cnVlLCBUb29scy5tb2RpZnlPYmplY3QoXG4gICAgICAgIG1ldGFDb25maWd1cmF0aW9uLmRlZmF1bHQsIG1ldGFDb25maWd1cmF0aW9uLmRlYnVnXG4gICAgKSwgbWV0YUNvbmZpZ3VyYXRpb24uZGVidWcpXG5lbHNlXG4gICAgY29uZmlndXJhdGlvbiA9IG1ldGFDb25maWd1cmF0aW9uLmRlZmF1bHRcbmNvbmZpZ3VyYXRpb24uZGVidWcgPSBkZWJ1Z1xuaWYgKHR5cGVvZiBjb25maWd1cmF0aW9uLmxpYnJhcnkgPT09ICdvYmplY3QnKVxuICAgIFRvb2xzLmV4dGVuZE9iamVjdCh0cnVlLCBUb29scy5tb2RpZnlPYmplY3QoXG4gICAgICAgIGxpYnJhcnlDb25maWd1cmF0aW9uLCBjb25maWd1cmF0aW9uLmxpYnJhcnlcbiAgICApLCBjb25maWd1cmF0aW9uLmxpYnJhcnkpXG5pZiAoXG4gICAgJ2xpYnJhcnknIGluIHNwZWNpZmljQ29uZmlndXJhdGlvbiAmJlxuICAgIHNwZWNpZmljQ29uZmlndXJhdGlvbi5saWJyYXJ5ID09PSB0cnVlIHx8IChcbiAgICAgICAgJ2xpYnJhcnknIGluIHNwZWNpZmljQ29uZmlndXJhdGlvbiAmJlxuICAgICAgICBzcGVjaWZpY0NvbmZpZ3VyYXRpb24ubGlicmFyeSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICEoJ2xpYnJhcnknIGluIHNwZWNpZmljQ29uZmlndXJhdGlvbilcbiAgICApICYmIGNvbmZpZ3VyYXRpb24ubGlicmFyeVxuKVxuICAgIGNvbmZpZ3VyYXRpb24gPSBUb29scy5leHRlbmRPYmplY3QodHJ1ZSwgVG9vbHMubW9kaWZ5T2JqZWN0KFxuICAgICAgICBjb25maWd1cmF0aW9uLCBsaWJyYXJ5Q29uZmlndXJhdGlvblxuICAgICksIGxpYnJhcnlDb25maWd1cmF0aW9uKVxuLy8gZW5kcmVnaW9uXG4vKlxuICAgIHJlZ2lvbiBtZXJnaW5nIGFuZCBldmFsdWF0aW5nIGRlZmF1bHQsIHRlc3QsIGRvY3VtZW50LCBzcGVjaWZpYyBhbmQgZHluYW1pY1xuICAgIHNldHRpbmdzXG4qL1xuLy8gLyByZWdpb24gbG9hZCBhZGRpdGlvbmFsIGR5bmFtaWNhbGx5IGdpdmVuIGNvbmZpZ3VyYXRpb25cbmxldCBjb3VudDpudW1iZXIgPSAwXG5sZXQgZmlsZVBhdGg6P3N0cmluZyA9IG51bGxcbndoaWxlICh0cnVlKSB7XG4gICAgY29uc3QgbmV3RmlsZVBhdGg6c3RyaW5nID0gY29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHQgK1xuICAgICAgICBgLmR5bmFtaWNDb25maWd1cmF0aW9uLSR7Y291bnR9Lmpzb25gXG4gICAgaWYgKCFUb29scy5pc0ZpbGVTeW5jKG5ld0ZpbGVQYXRoKSlcbiAgICAgICAgYnJlYWtcbiAgICBmaWxlUGF0aCA9IG5ld0ZpbGVQYXRoXG4gICAgY291bnQgKz0gMVxufVxubGV0IHJ1bnRpbWVJbmZvcm1hdGlvbjpQbGFpbk9iamVjdCA9IHtcbiAgICBnaXZlbkNvbW1hbmRMaW5lQXJndW1lbnRzOiBwcm9jZXNzLmFyZ3Zcbn1cbmlmIChmaWxlUGF0aCkge1xuICAgIHJ1bnRpbWVJbmZvcm1hdGlvbiA9IEpTT04ucGFyc2UoZmlsZVN5c3RlbS5yZWFkRmlsZVN5bmMoZmlsZVBhdGgsIHtcbiAgICAgICAgZW5jb2Rpbmc6IChjb25maWd1cmF0aW9uLmVuY29kaW5nOnN0cmluZyl9KSlcbiAgICBmaWxlU3lzdGVtLnVubGluayhmaWxlUGF0aCwgKGVycm9yOj9FcnJvcik6dm9pZCA9PiB7XG4gICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgIHRocm93IGVycm9yXG4gICAgfSlcbn1cbi8vIC8vIHJlZ2lvbiBhcHBseSB1c2UgY2FzZSBzcGVjaWZpYyBjb25maWd1cmF0aW9uXG5pZiAocnVudGltZUluZm9ybWF0aW9uLmdpdmVuQ29tbWFuZExpbmVBcmd1bWVudHMubGVuZ3RoID4gMilcbiAgICBmb3IgKGNvbnN0IHR5cGU6c3RyaW5nIG9mIFsnZG9jdW1lbnQnLCAndGVzdCcsICd0ZXN0OmJyb3dzZXInXSlcbiAgICAgICAgaWYgKHJ1bnRpbWVJbmZvcm1hdGlvbi5naXZlbkNvbW1hbmRMaW5lQXJndW1lbnRzWzJdID09PSB0eXBlKVxuICAgICAgICAgICAgVG9vbHMuZXh0ZW5kT2JqZWN0KHRydWUsIFRvb2xzLm1vZGlmeU9iamVjdChcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLCBjb25maWd1cmF0aW9uW3R5cGVdXG4gICAgICAgICAgICApLCBjb25maWd1cmF0aW9uW3R5cGVdKVxuLy8gLy8gZW5kcmVnaW9uXG5mb3IgKGNvbnN0IHR5cGU6c3RyaW5nIG9mIFsnZG9jdW1lbnQnLCAndGVzdCcsICd0ZXN0OkJyb3dzZXInXSlcbiAgICBkZWxldGUgY29uZmlndXJhdGlvblt0eXBlXVxuLy8gLyBlbmRyZWdpb25cblRvb2xzLmV4dGVuZE9iamVjdCh0cnVlLCBUb29scy5tb2RpZnlPYmplY3QoVG9vbHMubW9kaWZ5T2JqZWN0KFxuICAgIGNvbmZpZ3VyYXRpb24sIHNwZWNpZmljQ29uZmlndXJhdGlvblxuKSwgcnVudGltZUluZm9ybWF0aW9uKSwgc3BlY2lmaWNDb25maWd1cmF0aW9uLCBydW50aW1lSW5mb3JtYXRpb24pXG5sZXQgcmVzdWx0Oj9QbGFpbk9iamVjdCA9IG51bGxcbmlmIChydW50aW1lSW5mb3JtYXRpb24uZ2l2ZW5Db21tYW5kTGluZUFyZ3VtZW50cy5sZW5ndGggPiAzKVxuICAgIHJlc3VsdCA9IFRvb2xzLnN0cmluZ1BhcnNlRW5jb2RlZE9iamVjdChcbiAgICAgICAgcnVudGltZUluZm9ybWF0aW9uLmdpdmVuQ29tbWFuZExpbmVBcmd1bWVudHNbcnVudGltZUluZm9ybWF0aW9uXG4gICAgICAgICAgICAuZ2l2ZW5Db21tYW5kTGluZUFyZ3VtZW50cy5sZW5ndGggLSAxXSxcbiAgICAgICAgY29uZmlndXJhdGlvbiwgJ2NvbmZpZ3VyYXRpb24nKVxuaWYgKFRvb2xzLmlzUGxhaW5PYmplY3QocmVzdWx0KSlcbiAgICBUb29scy5leHRlbmRPYmplY3QodHJ1ZSwgVG9vbHMubW9kaWZ5T2JqZWN0KGNvbmZpZ3VyYXRpb24sIHJlc3VsdCksIHJlc3VsdClcbi8vIC8gcmVnaW9uIGRldGVybWluZSBleGlzdGluZyBwcmUgY29tcGlsZWQgZGxsIG1hbmlmZXN0cyBmaWxlIHBhdGhzXG5jb25maWd1cmF0aW9uLmRsbE1hbmlmZXN0RmlsZVBhdGhzID0gW11cbmlmIChUb29scy5pc0RpcmVjdG9yeVN5bmMoY29uZmlndXJhdGlvbi5wYXRoLnRhcmdldC5iYXNlKSlcbiAgICBmb3IgKGNvbnN0IGZpbGVOYW1lOnN0cmluZyBvZiBmaWxlU3lzdGVtLnJlYWRkaXJTeW5jKFxuICAgICAgICBjb25maWd1cmF0aW9uLnBhdGgudGFyZ2V0LmJhc2VcbiAgICApKVxuICAgICAgICBpZiAoZmlsZU5hbWUubWF0Y2goL14uKlxcLmRsbC1tYW5pZmVzdFxcLmpzb24kLykpXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLmRsbE1hbmlmZXN0RmlsZVBhdGhzLnB1c2gocGF0aC5yZXNvbHZlKFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC50YXJnZXQuYmFzZSwgZmlsZU5hbWUpKVxuLy8gLyBlbmRyZWdpb25cbi8vIC8gcmVnaW9uIGRlZmluZSBkeW5hbWljIHJlc29sdmUgcGFyYW1ldGVyXG5jb25zdCBwYXJhbWV0ZXJEZXNjcmlwdGlvbjpBcnJheTxzdHJpbmc+ID0gW1xuICAgICdjdXJyZW50UGF0aCcsICdmaWxlU3lzdGVtJywgJ0hlbHBlcicsICdwYXRoJywgJ3JlcXVpcmUnLCAnVG9vbHMnLFxuICAgICd3ZWJPcHRpbWl6ZXJQYXRoJywgJ25vdycsICdub3dVVENUaW1lc3RhbXAnXVxuY29uc3Qgbm93OkRhdGUgPSBuZXcgRGF0ZSgpXG5jb25zdCBub3dVVENUaW1lc3RhbXA6bnVtYmVyID0gRGF0ZS5VVEMoXG4gICAgbm93LmdldFVUQ0Z1bGxZZWFyKCksIG5vdy5nZXRVVENNb250aCgpLCBub3cuZ2V0VVRDRGF0ZSgpLFxuICAgIG5vdy5nZXRVVENIb3VycygpLCBub3cuZ2V0VVRDTWludXRlcygpLCBub3cuZ2V0VVRDU2Vjb25kcygpLFxuICAgIG5vdy5nZXRVVENNaWxsaXNlY29uZHMoKSlcbi8qIGVzbGludC1kaXNhYmxlIG5vLWV2YWwgKi9cbmNvbnN0IHBhcmFtZXRlcjpBcnJheTxhbnk+ID0gW1xuICAgIHByb2Nlc3MuY3dkKCksIGZpbGVTeXN0ZW0sIEhlbHBlciwgcGF0aCwgZXZhbCgncmVxdWlyZScpLCBUb29scywgX19kaXJuYW1lLFxuICAgIG5vdywgbm93VVRDVGltZXN0YW1wXVxuLyogZXNsaW50LWVuYWJsZSBuby1ldmFsICovXG4vLyAvIGVuZHJlZ2lvblxuLy8gLyByZWdpb24gYnVpbGQgYWJzb2x1dGUgcGF0aHNcbmNvbmZpZ3VyYXRpb24ucGF0aC5iYXNlID0gcGF0aC5yZXNvbHZlKFxuICAgIGNvbmZpZ3VyYXRpb24ucGF0aC5jb250ZXh0LCBjb25maWd1cmF0aW9uLnBhdGguYmFzZSlcbmZvciAoY29uc3Qga2V5OnN0cmluZyBpbiBjb25maWd1cmF0aW9uLnBhdGgpXG4gICAgaWYgKFxuICAgICAgICBjb25maWd1cmF0aW9uLnBhdGguaGFzT3duUHJvcGVydHkoa2V5KSAmJiBrZXkgIT09ICdiYXNlJyAmJlxuICAgICAgICB0eXBlb2YgY29uZmlndXJhdGlvbi5wYXRoW2tleV0gPT09ICdzdHJpbmcnXG4gICAgKVxuICAgICAgICBjb25maWd1cmF0aW9uLnBhdGhba2V5XSA9IHBhdGgucmVzb2x2ZShcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC5iYXNlLCBjb25maWd1cmF0aW9uLnBhdGhba2V5XVxuICAgICAgICApICsgJy8nXG4gICAgZWxzZSBpZiAoVG9vbHMuaXNQbGFpbk9iamVjdChjb25maWd1cmF0aW9uLnBhdGhba2V5XSkpIHtcbiAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoW2tleV0uYmFzZSA9IHBhdGgucmVzb2x2ZShcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aC5iYXNlLCBjb25maWd1cmF0aW9uLnBhdGhba2V5XS5iYXNlKVxuICAgICAgICBmb3IgKGNvbnN0IHN1YktleTpzdHJpbmcgaW4gY29uZmlndXJhdGlvbi5wYXRoW2tleV0pXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoW2tleV0uaGFzT3duUHJvcGVydHkoc3ViS2V5KSAmJlxuICAgICAgICAgICAgICAgICFbJ2Jhc2UnLCAncHVibGljJ10uaW5jbHVkZXMoc3ViS2V5KSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25maWd1cmF0aW9uLnBhdGhba2V5XVtzdWJLZXldID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aFtrZXldW3N1YktleV0gPSBwYXRoLnJlc29sdmUoXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aFtrZXldLmJhc2UsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGF0aFtrZXldW3N1YktleV1cbiAgICAgICAgICAgICAgICApICsgJy8nXG4gICAgICAgICAgICBlbHNlIGlmIChUb29scy5pc1BsYWluT2JqZWN0KGNvbmZpZ3VyYXRpb24ucGF0aFtrZXldW3N1YktleV0pKSB7XG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoW2tleV1bc3ViS2V5XS5iYXNlID0gcGF0aC5yZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGhba2V5XS5iYXNlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGhba2V5XVtzdWJLZXldLmJhc2UpXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdWJTdWJLZXk6c3RyaW5nIGluIGNvbmZpZ3VyYXRpb24ucGF0aFtrZXldW3N1YktleV0pXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uLnBhdGhba2V5XVtzdWJLZXldLmhhc093blByb3BlcnR5KFxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViU3ViS2V5XG4gICAgICAgICAgICAgICAgICAgICkgJiYgc3ViU3ViS2V5ICE9PSAnYmFzZScgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbmZpZ3VyYXRpb24ucGF0aFtrZXldW3N1YktleV1bXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJTdWJLZXlcbiAgICAgICAgICAgICAgICAgICAgXSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGhba2V5XVtzdWJLZXldW3N1YlN1YktleV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgucmVzb2x2ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wYXRoW2tleV1bc3ViS2V5XS5iYXNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLnBhdGhba2V5XVtzdWJLZXldW3N1YlN1YktleV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApICsgJy8nXG4gICAgICAgICAgICB9XG4gICAgfVxuLy8gLyBlbmRyZWdpb25cbmNvbnN0IHJlc29sdmVkQ29uZmlndXJhdGlvbjpSZXNvbHZlZENvbmZpZ3VyYXRpb24gPVxuICAgIFRvb2xzLnJlc29sdmVEeW5hbWljRGF0YVN0cnVjdHVyZShcbiAgICAgICAgY29uZmlndXJhdGlvbiwgcGFyYW1ldGVyRGVzY3JpcHRpb24sIHBhcmFtZXRlcilcbi8vIGVuZHJlZ2lvblxuLy8gcmVnaW9uIGNvbnNvbGlkYXRlIGZpbGUgc3BlY2lmaWMgYnVpbGQgY29uZmlndXJhdGlvblxuLy8gQXBwbHkgZGVmYXVsdCBmaWxlIGxldmVsIGJ1aWxkIGNvbmZpZ3VyYXRpb25zIHRvIGFsbCBmaWxlIHR5cGUgc3BlY2lmaWNcbi8vIG9uZXMuXG5jb25zdCBkZWZhdWx0Q29uZmlndXJhdGlvbjpQbGFpbk9iamVjdCA9XG4gICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmJ1aWxkLnR5cGVzLmRlZmF1bHRcbmRlbGV0ZSByZXNvbHZlZENvbmZpZ3VyYXRpb24uYnVpbGQudHlwZXMuZGVmYXVsdFxuZm9yIChjb25zdCB0eXBlOnN0cmluZyBpbiByZXNvbHZlZENvbmZpZ3VyYXRpb24uYnVpbGQudHlwZXMpXG4gICAgaWYgKHJlc29sdmVkQ29uZmlndXJhdGlvbi5idWlsZC50eXBlcy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSlcbiAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmJ1aWxkLnR5cGVzW3R5cGVdID0gVG9vbHMuZXh0ZW5kT2JqZWN0KHRydWUsIHtcbiAgICAgICAgfSwgZGVmYXVsdENvbmZpZ3VyYXRpb24sIFRvb2xzLmV4dGVuZE9iamVjdChcbiAgICAgICAgICAgIHRydWUsIHtleHRlbnNpb246IHR5cGV9LCByZXNvbHZlZENvbmZpZ3VyYXRpb24uYnVpbGQudHlwZXNbdHlwZV0sXG4gICAgICAgICAgICB7dHlwZX0pKVxuLy8gZW5kcmVnaW9uXG4vLyByZWdpb24gcmVzb2x2ZSBtb2R1bGUgbG9jYXRpb24gYW5kIGRldGVybWluZSB3aGljaCBhc3NldCB0eXBlcyBhcmUgbmVlZGVkXG5yZXNvbHZlZENvbmZpZ3VyYXRpb24ubW9kdWxlLmxvY2F0aW9ucyA9IEhlbHBlci5kZXRlcm1pbmVNb2R1bGVMb2NhdGlvbnMoXG4gICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmluamVjdGlvbi5pbnRlcm5hbCxcbiAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ubW9kdWxlLmFsaWFzZXMsXG4gICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLm1vZHVsZS5yZXBsYWNlbWVudHMubm9ybWFsLFxuICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5leHRlbnNpb25zLCByZXNvbHZlZENvbmZpZ3VyYXRpb24ucGF0aC5jb250ZXh0LFxuICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYXRoLnNvdXJjZS5hc3NldC5iYXNlKVxucmVzb2x2ZWRDb25maWd1cmF0aW9uLmluamVjdGlvbiA9IEhlbHBlci5yZXNvbHZlSW5qZWN0aW9uKFxuICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5pbmplY3Rpb24sIEhlbHBlci5yZXNvbHZlQnVpbGRDb25maWd1cmF0aW9uRmlsZVBhdGhzKFxuICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24uYnVpbGQudHlwZXMsXG4gICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYXRoLnNvdXJjZS5hc3NldC5iYXNlLFxuICAgICAgICBIZWxwZXIubm9ybWFsaXplUGF0aHMocmVzb2x2ZWRDb25maWd1cmF0aW9uLnBhdGguaWdub3JlLmNvbmNhdChcbiAgICAgICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5tb2R1bGUuZGlyZWN0b3J5TmFtZXMsXG4gICAgICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ubG9hZGVyLmRpcmVjdG9yeU5hbWVzXG4gICAgICAgICkubWFwKChmaWxlUGF0aDpzdHJpbmcpOnN0cmluZyA9PiBwYXRoLnJlc29sdmUoXG4gICAgICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ucGF0aC5jb250ZXh0LCBmaWxlUGF0aClcbiAgICAgICAgKS5maWx0ZXIoKGZpbGVQYXRoOnN0cmluZyk6Ym9vbGVhbiA9PlxuICAgICAgICAgICAgIXJlc29sdmVkQ29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHQuc3RhcnRzV2l0aChmaWxlUGF0aCkpKSxcbiAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLnBhY2thZ2UubWFpbi5maWxlTmFtZXNcbiAgICApLCByZXNvbHZlZENvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmF1dG9FeGNsdWRlLFxuICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5tb2R1bGUuYWxpYXNlcyxcbiAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ubW9kdWxlLnJlcGxhY2VtZW50cy5ub3JtYWwsXG4gICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmV4dGVuc2lvbnMsXG4gICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLnBhdGguY29udGV4dCxcbiAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ucGF0aC5zb3VyY2UuYXNzZXQuYmFzZSxcbiAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ucGF0aC5pZ25vcmUpXG5jb25zdCBpbnRlcm5hbEluamVjdGlvbjphbnkgPSByZXNvbHZlZENvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmludGVybmFsXG5yZXNvbHZlZENvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmludGVybmFsID0ge1xuICAgIGdpdmVuOiByZXNvbHZlZENvbmZpZ3VyYXRpb24uaW5qZWN0aW9uLmludGVybmFsLFxuICAgIG5vcm1hbGl6ZWQ6IEhlbHBlci5yZXNvbHZlTW9kdWxlc0luRm9sZGVycyhcbiAgICAgICAgSGVscGVyLm5vcm1hbGl6ZUludGVybmFsSW5qZWN0aW9uKGludGVybmFsSW5qZWN0aW9uKSxcbiAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLm1vZHVsZS5hbGlhc2VzLFxuICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ubW9kdWxlLnJlcGxhY2VtZW50cy5ub3JtYWwsXG4gICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHQsXG4gICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYXRoLnNvdXJjZS5hc3NldC5iYXNlLFxuICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ucGF0aC5pZ25vcmUuY29uY2F0KFxuICAgICAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLm1vZHVsZS5kaXJlY3RvcnlOYW1lcyxcbiAgICAgICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5sb2FkZXIuZGlyZWN0b3J5TmFtZXNcbiAgICAgICAgKS5tYXAoKGZpbGVQYXRoOnN0cmluZyk6c3RyaW5nID0+IHBhdGgucmVzb2x2ZShcbiAgICAgICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYXRoLmNvbnRleHQsIGZpbGVQYXRoKVxuICAgICAgICApLmZpbHRlcigoZmlsZVBhdGg6c3RyaW5nKTpib29sZWFuID0+XG4gICAgICAgICAgICAhcmVzb2x2ZWRDb25maWd1cmF0aW9uLnBhdGguY29udGV4dC5zdGFydHNXaXRoKGZpbGVQYXRoKSkpfVxucmVzb2x2ZWRDb25maWd1cmF0aW9uLm5lZWRlZCA9IHtqYXZhU2NyaXB0OiBjb25maWd1cmF0aW9uLmRlYnVnICYmIFtcbiAgICAnc2VydmUnLCAndGVzdDpicm93c2VyJ1xuXS5pbmNsdWRlcyhyZXNvbHZlZENvbmZpZ3VyYXRpb24uZ2l2ZW5Db21tYW5kTGluZUFyZ3VtZW50c1syXSl9XG5mb3IgKGNvbnN0IGNodW5rTmFtZTpzdHJpbmcgaW4gcmVzb2x2ZWRDb25maWd1cmF0aW9uLmluamVjdGlvbi5pbnRlcm5hbFxuICAgIC5ub3JtYWxpemVkXG4pXG4gICAgaWYgKHJlc29sdmVkQ29uZmlndXJhdGlvbi5pbmplY3Rpb24uaW50ZXJuYWwubm9ybWFsaXplZC5oYXNPd25Qcm9wZXJ0eShcbiAgICAgICAgY2h1bmtOYW1lXG4gICAgKSlcbiAgICAgICAgZm9yIChjb25zdCBtb2R1bGVJRDpzdHJpbmcgb2YgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmluamVjdGlvbi5pbnRlcm5hbFxuICAgICAgICAgICAgLm5vcm1hbGl6ZWRbY2h1bmtOYW1lXVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVQYXRoOj9zdHJpbmcgPSBIZWxwZXIuZGV0ZXJtaW5lTW9kdWxlRmlsZVBhdGgoXG4gICAgICAgICAgICAgICAgbW9kdWxlSUQsIHJlc29sdmVkQ29uZmlndXJhdGlvbi5tb2R1bGUuYWxpYXNlcyxcbiAgICAgICAgICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ubW9kdWxlLnJlcGxhY2VtZW50cy5ub3JtYWwsXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmV4dGVuc2lvbnMsXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLnBhdGguY29udGV4dCxcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICBOT1RFOiBXZSBkb2Vzbid0IHVzZVxuICAgICAgICAgICAgICAgICAgICBcInJlc29sdmVkQ29uZmlndXJhdGlvbi5wYXRoLnNvdXJjZS5hc3NldC5iYXNlXCIgYmVjYXVzZSB3ZVxuICAgICAgICAgICAgICAgICAgICBoYXZlIGFscmVhZHkgcmVzb2x2ZSBhbGwgbW9kdWxlIGlkcy5cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICcuLycsXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLnBhdGguaWdub3JlLFxuICAgICAgICAgICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5tb2R1bGUuZGlyZWN0b3J5TmFtZXMsXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLnBhY2thZ2UubWFpbi5maWxlTmFtZXMsXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLnBhY2thZ2UubWFpbi5wcm9wZXJ0eU5hbWVzLFxuICAgICAgICAgICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYWNrYWdlLmFsaWFzUHJvcGVydHlOYW1lcyxcbiAgICAgICAgICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24uZW5jb2RpbmcpXG4gICAgICAgICAgICBsZXQgdHlwZTo/c3RyaW5nXG4gICAgICAgICAgICBpZiAoZmlsZVBhdGgpXG4gICAgICAgICAgICAgICAgdHlwZSA9IEhlbHBlci5kZXRlcm1pbmVBc3NldFR5cGUoXG4gICAgICAgICAgICAgICAgICAgIGZpbGVQYXRoLCByZXNvbHZlZENvbmZpZ3VyYXRpb24uYnVpbGQudHlwZXMsXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5wYXRoKVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgYEdpdmVuIHJlcXVlc3QgXCIke21vZHVsZUlEfVwiIGNvdWxkbid0IGJlIHJlc29sdmVkLmApXG4gICAgICAgICAgICBpZiAodHlwZSlcbiAgICAgICAgICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ubmVlZGVkW3R5cGVdID0gdHJ1ZVxuICAgICAgICB9XG4vLyBlbmRyZWdpb25cbi8vIHJlZ2lvbiBhZGRpbmcgc3BlY2lhbCBhbGlhc2VzXG4vLyBOT1RFOiBUaGlzIGFsaWFzIGNvdWxkbid0IGJlIHNldCBpbiB0aGUgXCJwYWNrYWdlLmpzb25cIiBmaWxlIHNpbmNlIHRoaXMgd291bGRcbi8vIHJlc3VsdCBpbiBhbiBlbmRsZXNzIGxvb3AuXG5yZXNvbHZlZENvbmZpZ3VyYXRpb24ubG9hZGVyLmFsaWFzZXMud2ViT3B0aW1pemVyRGVmYXVsdFRlbXBsYXRlRmlsZUxvYWRlciA9ICcnXG5mb3IgKGNvbnN0IGxvYWRlcjpQbGFpbk9iamVjdCBvZiByZXNvbHZlZENvbmZpZ3VyYXRpb24uZmlsZXMuZGVmYXVsdEhUTUxcbiAgICAudGVtcGxhdGUudXNlXG4pIHtcbiAgICBpZiAoXG4gICAgICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5sb2FkZXIuYWxpYXNlc1xuICAgICAgICAud2ViT3B0aW1pemVyRGVmYXVsdFRlbXBsYXRlRmlsZUxvYWRlclxuICAgIClcbiAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmxvYWRlci5hbGlhc2VzXG4gICAgICAgICAgICAud2ViT3B0aW1pemVyRGVmYXVsdFRlbXBsYXRlRmlsZUxvYWRlciArPSAnISdcbiAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24ubG9hZGVyLmFsaWFzZXNcbiAgICAgICAgLndlYk9wdGltaXplckRlZmF1bHRUZW1wbGF0ZUZpbGVMb2FkZXIgKz0gbG9hZGVyLmxvYWRlclxuICAgIGlmIChsb2FkZXIub3B0aW9ucylcbiAgICAgICAgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmxvYWRlci5hbGlhc2VzXG4gICAgICAgICAgICAud2ViT3B0aW1pemVyRGVmYXVsdFRlbXBsYXRlRmlsZUxvYWRlciArPSAnPycgK1xuICAgICAgICAgICAgICAgIFRvb2xzLmNvbnZlcnRDaXJjdWxhck9iamVjdFRvSlNPTihsb2FkZXIub3B0aW9ucylcbn1cbnJlc29sdmVkQ29uZmlndXJhdGlvbi5tb2R1bGUuYWxpYXNlcy53ZWJPcHRpbWl6ZXJEZWZhdWx0VGVtcGxhdGVGaWxlUGF0aCQgPVxuICAgIHJlc29sdmVkQ29uZmlndXJhdGlvbi5maWxlcy5kZWZhdWx0SFRNTC50ZW1wbGF0ZS5maWxlUGF0aFxuLy8gZW5kcmVnaW9uXG4vLyByZWdpb24gYXBwbHkgaHRtbCB3ZWJwYWNrIHBsdWdpbiB3b3JrYXJvdW5kc1xuLypcbiAgICBOT1RFOiBQcm92aWRlcyBhIHdvcmthcm91bmQgdG8gaGFuZGxlIGEgYnVnIHdpdGggY2hhaW5lZCBsb2FkZXJcbiAgICBjb25maWd1cmF0aW9ucy5cbiovXG5mb3IgKFxuICAgIGxldCBodG1sQ29uZmlndXJhdGlvbjpIVE1MQ29uZmlndXJhdGlvbiBvZiByZXNvbHZlZENvbmZpZ3VyYXRpb24uZmlsZXMuaHRtbFxuKSB7XG4gICAgVG9vbHMuZXh0ZW5kT2JqZWN0KFxuICAgICAgICB0cnVlLCBodG1sQ29uZmlndXJhdGlvbiwgcmVzb2x2ZWRDb25maWd1cmF0aW9uLmZpbGVzLmRlZmF1bHRIVE1MKVxuICAgIGh0bWxDb25maWd1cmF0aW9uLnRlbXBsYXRlLnJlcXVlc3QgPSBodG1sQ29uZmlndXJhdGlvbi50ZW1wbGF0ZS5maWxlUGF0aFxuICAgIGlmIChcbiAgICAgICAgaHRtbENvbmZpZ3VyYXRpb24udGVtcGxhdGUuZmlsZVBhdGggIT09XG4gICAgICAgICAgICByZXNvbHZlZENvbmZpZ3VyYXRpb24uZmlsZXMuZGVmYXVsdEhUTUwudGVtcGxhdGUuZmlsZVBhdGggJiZcbiAgICAgICAgaHRtbENvbmZpZ3VyYXRpb24udGVtcGxhdGUub3B0aW9uc1xuICAgICkge1xuICAgICAgICBjb25zdCByZXF1ZXN0U3RyaW5nOk9iamVjdCA9IG5ldyBTdHJpbmcoXG4gICAgICAgICAgICBodG1sQ29uZmlndXJhdGlvbi50ZW1wbGF0ZS5yZXF1ZXN0ICtcbiAgICAgICAgICAgIFRvb2xzLmNvbnZlcnRDaXJjdWxhck9iamVjdFRvSlNPTihcbiAgICAgICAgICAgICAgICBodG1sQ29uZmlndXJhdGlvbi50ZW1wbGF0ZS5vcHRpb25zKSlcbiAgICAgICAgcmVxdWVzdFN0cmluZy5yZXBsYWNlID0gKChzdHJpbmc6c3RyaW5nKTpGdW5jdGlvbiA9PiAoXG4gICAgICAgICAgICBfc2VhcmNoOlJlZ0V4cHxzdHJpbmcsIF9yZXBsYWNlbWVudDpzdHJpbmd8KFxuICAgICAgICAgICAgICAgIC4uLm1hdGNoZXM6QXJyYXk8c3RyaW5nPlxuICAgICAgICAgICAgKSA9PiBzdHJpbmdcbiAgICAgICAgKTpzdHJpbmcgPT4gc3RyaW5nKShodG1sQ29uZmlndXJhdGlvbi50ZW1wbGF0ZS5maWxlUGF0aClcbiAgICAgICAgaHRtbENvbmZpZ3VyYXRpb24udGVtcGxhdGUucmVxdWVzdCA9IHJlcXVlc3RTdHJpbmdcbiAgICB9XG59XG4vLyBlbmRyZWdpb25cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVkQ29uZmlndXJhdGlvblxuLy8gcmVnaW9uIHZpbSBtb2RsaW5lXG4vLyB2aW06IHNldCB0YWJzdG9wPTQgc2hpZnR3aWR0aD00IGV4cGFuZHRhYjpcbi8vIHZpbTogZm9sZG1ldGhvZD1tYXJrZXIgZm9sZG1hcmtlcj1yZWdpb24sZW5kcmVnaW9uOlxuLy8gZW5kcmVnaW9uXG4iXX0=