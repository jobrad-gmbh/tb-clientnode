{
  "name": "clientnode",
  "version": "3.0.373",
  "license": "CC-BY-3.0",
  "description": "upgrade to object orientated rock solid plugins",
  "homepage": "https://torben.website/clientNode",
  "documentationWebsite": {
    "languages": [
      "deDE",
      "enUS"
    ],
    "name": "clientNode",
    "tagline": "upgrade to object orientated rock solid plugins<!--deDE:Schreibe Objekt orientierte solide Plugins-->",
    "trackingCode": "UA-40192634-7"
  },
  "keywords": [
    "client",
    "tools",
    "node",
    "polymorph",
    "jquery"
  ],
  "files": [
    "index.js",
    "test.js",
    "test.compiled.js"
  ],
  "main": "index.compiled.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/thaibault/clientNode"
  },
  "scripts": {
    "build": "webOptimizer build && yarn build:test",
    "build:alternatively": "babel --plugins @babel/plugin-proposal-class-properties,@babel/plugin-transform-flow-strip-types,@babel/plugin-transform-runtime --presets @babel/env --source-maps inline --out-file index.compiled.js index.js && yarn build:test",
    "build:export": "webOptimizer build '{__reference__: \"target:export\"}' && yarn build:test",
    "build:export:compatible": "webOptimizer build '{__reference__: [\"target:export\", \"target:compatible\"]}' && yarn build:test",
    "build:test": "webOptimizer build '{__reference__: \"target:test\"}'",
    "clear": "webOptimizer clear",
    "document": "webOptimizer document",
    "lint": "webOptimizer check:type; webOptimizer lint",
    "prepare": "if ! yarn build; then echo You should rerun install procedure to resolve dependency cycle. && yarn buildAlternatively; fi",
    "report:coverage": "nyc report --reporter=text-lcov | coveralls",
    "serve": "webOptimizer serve",
    "start": "yarn serve",
    "test": "nyc yarn test:plain",
    "test:browser": "webOptimizer test:browser",
    "test:plain": "webOptimizer test",
    "update": "yarn version --patch && yarn publish",
    "update:documentation": "documentationWebsite --log-level info",
    "watch": "webOptimizer build --watch"
  },
  "dependencies": {
    "colors": "*"
  },
  "peerDependencies": {
    "babel-runtime": "*",
    "jquery": "*",
    "node-fetch": "*",
    "qunit": "*"
  },
  "devDependencies": {
    "@babel/cli": "*",
    "@babel/plugin-transform-proto-to-assign": "*",
    "babel-eslint": "*",
    "babel-plugin-transform-modern-regexp": "*",
    "coveralls": "*",
    "documentation-website": "*",
    "eslint": "*",
    "eslint-config-google": "*",
    "eslint-plugin-flowtype": "*",
    "eslint-plugin-jsdoc": "*",
    "flow-bin": "*",
    "jquery": "*",
    "jsdoc": "*",
    "node-fetch": "*",
    "nyc": "*",
    "qunit": "*",
    "rimraf": "*",
    "weboptimizer": "*",
    "webpack": "*",
    "webpack-cli": "*",
    "webpack-dev-server": "*"
  },
  "sideEffects": false,
  "webOptimizer": {
    "debug": {
      "module": {
        "optimizer": {
          "babelMinify": {
            "bundle": null,
            "module": null
          }
        }
      }
    },
    "files": {
      "compose": {
        "cascadingStyleSheet": null
      }
    },
    "module": {
      "aliases": {
        "clientnode$": "./index",
        "jquery$": "jquery/dist/jquery.min"
      },
      "optimizer": {
        "babelMinify": {
          "bundle": {
            "transform": {
              "#": "To provide a generic logging mechanism we need this feature to be exported.",
              "removeConsole": false
            }
          },
          "module": {
            "#": "For Task \"test\", this module would produce this error \"ERROR in ./test.js Module build failed (from ./node_modules/babel-loader/lib/index.js): TypeError: clientNode/test.js: Cannot read property 'end' of null\".",
            "evaluate": false,
            "#0": "For external task \"clear\", this module would produce this error \"UnhandledPromiseRejectionWarning: TypeError: Cannot create property 'next' on string '.dynamicConfiguration-0.json' at Function.<anonymous> (clientNode/index.compiled.js:1:80221)\".",
            "mangle": false,
            "#1": "To provide a generic logging mechanism we need this feature to be exported.",
            "removeConsole": false
          }
        }
      },
      "preprocessor": {
        "javaScript": {
          "options": {
            "plugins": {
              "#": "Can be removed when stage-3 proposals like \"https://github.com/tc39/proposal-regexp-named-groups\" has been implemented.",
              "__append__": [
                [
                  "transform-modern-regexp",
                  {
                    "features": [
                      "dotAll",
                      "namedCapturingGroups"
                    ]
                  }
                ]
              ]
            }
          }
        }
      }
    },
    "target:compatible": {
      "module": {
        "preprocessor": {
          "javaScript": {
            "options": {
              "plugins": {
                "__append__": "@babel/plugin-transform-proto-to-assign"
              }
            }
          }
        }
      }
    },
    "target:export": {
      "module": {
        "preprocessor": {
          "javaScript": {
            "options": {
              "plugins": {
                "__remove__": "@babel/plugin-transform-runtime"
              }
            }
          }
        }
      }
    },
    "target:test": {
      "module": {
        "aliases": {
          "__remove__": "clientnode$"
        }
      },
      "injection": {
        "entry": {
          "index": [],
          "test": "./test"
        },
        "external": {
          "implicit": {
            "pattern": {
              "exclude": [
                {
                  "__evaluate__": "/^\\.\\/test/"
                }
              ],
              "include": {
                "__append__": {
                  "__evaluate__": "/^\\./"
                }
              }
            }
          }
        }
      },
      "targetTechnology": "node"
    }
  }
}
